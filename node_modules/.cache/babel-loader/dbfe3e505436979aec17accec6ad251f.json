{"ast":null,"code":"import { ApolloClient, InMemoryCache, useQuery, gql } from \"@apollo/client\";\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { split, HttpLink } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nconst httpLink = new HttpLink({\n  uri: 'https://task-react-apollo.hasura.app/v1/graphql',\n  headers: {\n    'x-hasura-admin-secret': 'v38Oc6xqwP6okQUzL4eYjREPUOrjD3l7yFVOKVlJLYK6c9EdUm7M4kTGTXQbZ8a9'\n  }\n});\nconst wsLink = new WebSocketLink({\n  uri: 'wss://task-react-apollo.hasura.app/v1/graphql',\n  options: {\n    reconnect: true,\n    connectionParams: {\n      headers: {\n        'x-hasura-admin-secret': 'v38Oc6xqwP6okQUzL4eYjREPUOrjD3l7yFVOKVlJLYK6c9EdUm7M4kTGTXQbZ8a9'\n      }\n    }\n  }\n}); // The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\n\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/hamid/Documents/file amiroh/graphql-query-apollo/graphql-query-apollo-task/src/apollo-client.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","WebSocketLink","split","HttpLink","getMainDefinition","httpLink","uri","headers","wsLink","options","reconnect","connectionParams","splitLink","query","definition","kind","operation","client","link","cache"],"mappings":"AAAA,SACIA,YADJ,EAEIC,aAFJ,EAGIC,QAHJ,EAIIC,GAJJ,QAKS,gBALT;AAOA,SAAQC,aAAR,QAA4B,wBAA5B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,gBAAhC;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA,MAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAC5BG,EAAAA,GAAG,EAAE,iDADuB;AAE5BC,EAAAA,OAAO,EAAE;AACP,6BAAyB;AADlB;AAFmB,CAAb,CAAjB;AAOA,MAAMC,MAAM,GAAG,IAAIP,aAAJ,CAAkB;AAC/BK,EAAAA,GAAG,EAAE,+CAD0B;AAE/BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,gBAAgB,EAAC;AACfJ,MAAAA,OAAO,EAAE;AACP,iCAAyB;AADlB;AADM;AAFV;AAFsB,CAAlB,CAAf,C,CAaA;AACA;AACA;AACA;AACA;;AAGA,MAAMK,SAAS,GAAGV,KAAK,CACrB,QAAe;AAAA,MAAd;AAAEW,IAAAA;AAAF,GAAc;AACb,QAAMC,UAAU,GAAGV,iBAAiB,CAACS,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBR,MARqB,EASrBH,QATqB,CAAvB;AAcA,MAAMY,MAAM,GAAG,IAAIpB,YAAJ,CAAiB;AAC9BqB,EAAAA,IAAI,EAAEN,SADwB;AAE9BO,EAAAA,KAAK,EAAE,IAAIrB,aAAJ;AAFuB,CAAjB,CAAf;AAQA,eAAemB,MAAf","sourcesContent":["import {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    useQuery,\r\n    gql\r\n  } from \"@apollo/client\";\r\n\r\nimport {WebSocketLink} from '@apollo/client/link/ws';\r\nimport { split, HttpLink } from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://task-react-apollo.hasura.app/v1/graphql',\r\n  headers: {\r\n    'x-hasura-admin-secret': 'v38Oc6xqwP6okQUzL4eYjREPUOrjD3l7yFVOKVlJLYK6c9EdUm7M4kTGTXQbZ8a9'\r\n  },\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://task-react-apollo.hasura.app/v1/graphql',\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams:{\r\n      headers: {\r\n        'x-hasura-admin-secret': 'v38Oc6xqwP6okQUzL4eYjREPUOrjD3l7yFVOKVlJLYK6c9EdUm7M4kTGTXQbZ8a9'\r\n      },\r\n\r\n    }\r\n  }\r\n});\r\n\r\n// The split function takes three parameters:\r\n//\r\n// * A function that's called for each operation to execute\r\n// * The Link to use for an operation if the function returns a \"truthy\" value\r\n// * The Link to use for an operation if the function returns a \"falsy\" value\r\n\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n\r\n  \r\nexport default client"]},"metadata":{},"sourceType":"module"}